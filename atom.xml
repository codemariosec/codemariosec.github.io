<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-30T17:56:16.199Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web前端_JavaScript的Day2_基本数据类型、数组、循环及条件表达式</title>
    <link href="http://example.com/2022/01/31/Web%E5%89%8D%E7%AB%AF-JavaScript%E7%9A%84Day2-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%BE%AA%E7%8E%AF%E5%8F%8A%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/01/31/Web%E5%89%8D%E7%AB%AF-JavaScript%E7%9A%84Day2-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%BE%AA%E7%8E%AF%E5%8F%8A%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-01-30T17:55:17.000Z</published>
    <updated>2022-01-30T17:56:16.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这部分内容主要介绍了JavaScript中基本数据类型、数组的基础知识、循环的常规应用以及表达式。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="1-什么是变量？"><a href="#1-什么是变量？" class="headerlink" title="1.什么是变量？"></a>1.什么是变量？</h2><p>变量是用来存储数据的，是存放具体数值的容器。</p><h2 id="2-变量的命名规范"><a href="#2-变量的命名规范" class="headerlink" title="2.变量的命名规范"></a>2.变量的命名规范</h2><p>变量名可以由字母、数字、下划线及美元符号组成，但是不能以数字开头。</p><h2 id="3-变量的使用"><a href="#3-变量的使用" class="headerlink" title="3.变量的使用"></a>3.变量的使用</h2><ul><li>先声明变量后初始化变量。</li><li>可以声明变量同时并初始化变量。</li></ul><p><strong>注意：变量名是区分大小写的。</strong></p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="1-什么是变量？-1"><a href="#1-什么是变量？-1" class="headerlink" title="1.什么是变量？"></a>1.什么是变量？</h2><p>变量是用来存储数据的，是存放具体数值的容器。</p><h2 id="2-基本的算术运算符"><a href="#2-基本的算术运算符" class="headerlink" title="2.基本的算术运算符"></a>2.基本的算术运算符</h2><p>变量是用来存储数据的，是存放具体数值的容器。</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>相关操作</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td>+</td><td>加法操作</td><td>1 + 2</td></tr><tr><td>-</td><td>减法操作</td><td>2 - 1</td></tr><tr><td>*</td><td>乘法操作</td><td>1 * 2</td></tr><tr><td>&#x2F;</td><td>除法操作</td><td>2 &#x2F; 1</td></tr><tr><td>%</td><td>取模操作</td><td>2 % 2</td></tr><tr><td>++</td><td>自增1运算</td><td><strong>前置++操作先自增加1再返回加过后的值</strong>var a &#x3D; 1;var b &#x3D; ++a;b &#x3D; 2a &#x3D; 2<strong>后置++操作先返回原来的值再自增加1</strong>var a &#x3D; 1;var b &#x3D; a++;b &#x3D; 1 a &#x3D; 2</td></tr><tr><td>–</td><td>自减1运算</td><td><strong>前置–操作先自减减1再返回加过后的值</strong>var a &#x3D; 2;var b &#x3D; –a;b &#x3D; 1a &#x3D; 1<strong>后置–操作先返回原来的值再自减减1</strong>var a &#x3D; 2;var b &#x3D; a–;b &#x3D; 2a &#x3D; 1</td></tr></tbody></table><h2 id="3-复合操作运算符"><a href="#3-复合操作运算符" class="headerlink" title="3.复合操作运算符"></a>3.复合操作运算符</h2><table><thead><tr><th>操作符</th><th>代码示例</th><th>代码变形</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>var a &#x3D; 1;a +&#x3D; 1;console.log(a); a &#x3D; 2</td><td>var a &#x3D; 1;a &#x3D; a + 1;console.log(a);a &#x3D; 2</td></tr><tr><td>-&#x3D;</td><td>var a &#x3D; 1;a -&#x3D; 1;console.log(a);a &#x3D; 0</td><td>var a &#x3D; 1;a &#x3D; a - 1;console.log(a);a &#x3D; 0</td></tr><tr><td>*&#x3D;</td><td>var a &#x3D; 1;a *&#x3D; 2;console.log(a);a &#x3D; 2</td><td>var a &#x3D; 1;a &#x3D; a * 2;console.log(a);a &#x3D; 2</td></tr><tr><td>&#x2F;&#x3D;</td><td>var a &#x3D; 2;a &#x2F;&#x3D; 2;console.log(a);a &#x3D; 1</td><td>var a &#x3D; 2;a &#x3D; a &#x2F; 2;console.log(a);a &#x3D; 1</td></tr><tr><td>%&#x3D;</td><td>var a &#x3D; 2;a %&#x3D; 2;console.log(a);a &#x3D; 0</td><td>var a &#x3D; 2;a &#x3D; a % 2;console.log(a);a &#x3D; 0</td></tr></tbody></table><h1 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符"></a>操作符</h1><p>JavaScript中包含以下几大基本数据类型：</p><p>数字型——包括整数和浮点数，例如：1、1.1、3.14。<br>字符串型——包括由任意字符组成的序列，例如：“a”、“one 2 two”。<br>布尔型——只有两种形式，true和false。<br>undefined——没有值的变量，当我们去访问这种并不存在的变量时，会得到这个特殊值undefined。<br>null——表示没有值或空值。在JavaScript中，null的数据类型是对象。</p><h2 id="1-typeof操作符"><a href="#1-typeof操作符" class="headerlink" title="1.typeof操作符"></a>1.typeof操作符</h2><p>使用typeof我们能够知道返回某个变量或值的类型是什么，该操作符的返回结果可能是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(typeof null);           //Object</span><br><span class="line">2 console.log(typeof 10);             //number</span><br><span class="line">3 console.log(typeof &quot;a&quot;);            //string</span><br><span class="line">4 console.log(typeof &#x27;10&#x27;);           //string</span><br><span class="line">5 console.log(typeof true);           //boolean</span><br><span class="line">6 console.log(typeof function()&#123;&#125;);   //function</span><br><span class="line">7 console.log(typeof a);              //undefined</span><br><span class="line">8 console.log(typeof undefined);      //undefined</span><br></pre></td></tr></table></figure><p>所以在JavaScript中使用typeof操作符返回的结果是：</p><ul><li>“number”;</li><li>“string”;</li><li>“boolean”;</li><li>“undefined”;</li><li>“object”;</li><li>“function”</li></ul><p><strong>注意：</strong></p><p>当八进制和十六进制的数字使用typeof操作符时返回的结果是number类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(typeof 0377);   //八进制返回&quot;number&quot;</span><br><span class="line">2 console.log(typeof 0xff);   //十六进制返回&quot;number&quot;</span><br></pre></td></tr></table></figure><p>当使用指数去表示的时候返回的是number类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 //2e1和2e+1是指数的两种表示方法</span><br><span class="line">2 console.log(typeof 2e1);    //number</span><br><span class="line">3 console.log(typeof 2e+1);    //number</span><br></pre></td></tr></table></figure><p>使用typeof操作符返回Infinity和-Infinity的结果也是number</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(typeof Infinity);    //number</span><br><span class="line">2 console.log(typeof -Infinity);    //number</span><br></pre></td></tr></table></figure><p>使用typeof操作符返回NaN的结果也是number</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(typeof NaN);</span><br></pre></td></tr></table></figure><h2 id="2-数字型"><a href="#2-数字型" class="headerlink" title="2.数字型"></a>2.数字型</h2><h3 id="1-Infinity"><a href="#1-Infinity" class="headerlink" title="1.Infinity"></a>1.Infinity</h3><p>在JavaScript中，超出处理范围的数值用Infinity这个特殊值来表示。例如当我们向控制台输出1e308时，返回结果正常，而向控制台再输出1e309的时候就超出范围了，所以会返回Infinity，其中如果超出最大值就是返回Infinity，如果超出最小值就返回-infinity。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(1e308);        //1e+308</span><br><span class="line">2 console.log(1e309);        //Infinity</span><br><span class="line">3 console.log(-1e309);    //-Infinity</span><br></pre></td></tr></table></figure><p><strong>Infinity和-Infinity相加得到的不是0而是NaN，Infinity-Infinity得到的也是NaN而并非0,实际上二者都一样。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(-Infinity + Infinity);    //NaN</span><br><span class="line">2 console.log(Infinity - Infinity);    //NaN</span><br></pre></td></tr></table></figure><p><strong>Infinity和数字执行除了取模以外的运算得到的结果都是Infinity，取模运算得到的是NaN。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(Infinity + 10);        //Infinity</span><br><span class="line">2 console.log(Infinity - 10);        //Infinity</span><br><span class="line">3 console.log(Infinity * 10);        //Infinity</span><br><span class="line">4 console.log(Infinity / 10);        //Infinity</span><br><span class="line">5 console.log(Infinity % 10);        //NaN</span><br></pre></td></tr></table></figure><h3 id="2-NaN"><a href="#2-NaN" class="headerlink" title="2.NaN"></a>2.NaN</h3><p>虽然NaN代表的是<strong>不是数字</strong>，但是正如我们在上面typeof中使用typeof操作符的时候一样，返回的值的类型也是数字类型，所以NaN是一种特殊的数字。</p><p><strong>注意：</strong></p><ul><li><strong>如果我们计算1 + “a”得到的结果是1a这个拼接后的字符串，但是如果我们使用的是其它的几个算术运算符的话返回的结果是NaN，因为这是错误的运算方式，返回的结果不会是一个数字。</strong></li><li><strong>如果我们在算术运算中将NaN算进去的话，整个运算得到的结果也是NaN。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 console.log(1 + &quot;a&quot;);            //1a</span><br><span class="line">2 console.log(1 - &quot;a&quot;);            //NaN</span><br><span class="line">3 console.log(1 * &quot;a&quot;);            //NaN</span><br><span class="line">4 console.log(1 / &quot;a&quot;);            //NaN</span><br><span class="line">5 console.log(1 % &quot;a&quot;);            //NaN</span><br><span class="line">6 console.log(1 + 2 + NaN + 3);    //NaN</span><br></pre></td></tr></table></figure><h3 id="3-字符串型"><a href="#3-字符串型" class="headerlink" title="3.字符串型"></a>3.字符串型</h3><p>字符串通常表示的是某段表示文本的字符序列。和某些语言不同的是，JavaScript语言中一对单引号或双引号之间的任何值都是一个字符串，有些编程语言单引号只能是表示字符，双引号表示字符串。所以在JavaScript中，’1’和”1”表示的都是字符串。字符串使用typeof操作符会返回string这个结果。</p><h4 id="1-字符串的表示"><a href="#1-字符串的表示" class="headerlink" title="1.字符串的表示"></a>1.字符串的表示</h4><ul><li>在JavaScript中字符串可以用单引号表示也可以用双引号表示。</li><li>字符串可以是引号中的零个或多个字符。</li><li>字符串可以是带单引号或双引号的任何值。</li><li>字符串之间可以使用加号运算符进行拼接，拼接后得到的新的字符串依然是字符串类型。</li></ul><h4 id="2-字符串类型和其它类型之间的相互转换"><a href="#2-字符串类型和其它类型之间的相互转换" class="headerlink" title="2.字符串类型和其它类型之间的相互转换"></a>2.字符串类型和其它类型之间的相互转换</h4><p>布尔型转字符串型<br><strong>通过a布尔类型与字符串使用加号运算符拼接将a由布尔类型转换为字符串类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = true;</span><br><span class="line">2 var b = &quot;&quot;;</span><br><span class="line">3 var c = a + b;</span><br><span class="line">4 console.log(c);            //true</span><br><span class="line">5 console.log(typeof c);    //string</span><br></pre></td></tr></table></figure><p>字符串型转数字型<br><strong>通过字符串类型和数字类型使用乘号运算符拼接得到的是数字类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = &quot;&quot;;</span><br><span class="line">2 var b = 1;</span><br><span class="line">3 var c = a * b;</span><br><span class="line">4 console.log(c);            //1</span><br><span class="line">5 console.log(typeof c);    //number</span><br></pre></td></tr></table></figure><p><strong>通过Number()方法返回数字，将字符串类型值转换为数字类型值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = Number(&quot;2021&quot;) + 1;</span><br><span class="line">2 console.log(a);            //2022</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p><strong>通过parseInt()方法解析一段字符串并返回数值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = parseInt(&quot;5a7b6&quot;);</span><br><span class="line">2 console.log(a);            //5</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p><strong>注意：parseInt()方法允许空格且只返回首个数字，上面的示例开头数字是5，所以最后返回的数值结果就是5。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = parseInt(&quot;1024&quot;);</span><br><span class="line">2 console.log(a);            //1024</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p><strong>所以说如果parseInt()方法中解析的字符串首字母不是数字的话返回的值就是NaN。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = parseInt(&quot;3.14&quot;);</span><br><span class="line">2 console.log(a);            //3</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p><strong>通过parseFloat()方法解析一段字符串并返回数值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = parseFloat(&quot;3.14a&quot;);</span><br><span class="line">2 console.log(a);            //3.14</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p><strong>注意：parseFloat()方法允许空格且只返回首个数字，上面的示例开头数字是3.14，所以最后返回的数值结果就是3.14。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = parseFloat(&quot;3.14&quot;);</span><br><span class="line">2 console.log(a);            //3.14</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p><strong>所以说如果parseFloat()方法中解析的字符串首字母不是数字的话返回的值就是NaN。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = parseFloat(&quot;ab12c&quot;);</span><br><span class="line">2 console.log(a);            //NaN</span><br><span class="line">3 console.log(typeof a);    //number</span><br></pre></td></tr></table></figure><p>数字型转字符串型<br><strong>通过字符串类型和数字类型进行拼接将数字类型的值转换为字符串类型值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = &#x27;&#x27;;</span><br><span class="line">2 var b = 1;</span><br><span class="line">3 var c = a + b;</span><br><span class="line">4 console.log(c);            //1</span><br><span class="line">5 console.log(typeof c);    //string</span><br></pre></td></tr></table></figure><h4 id="3-字符串拼接"><a href="#3-字符串拼接" class="headerlink" title="3.字符串拼接"></a>3.字符串拼接</h4><p><strong>字符串与字符串拼接得到的结果还是字符串类型。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = &#x27;java&#x27;;</span><br><span class="line">2 var b = &quot;script&quot;;</span><br><span class="line">3 var c = a + b;</span><br><span class="line">4 console.log(c);                //javascript</span><br><span class="line">5 console.log(typeof c);        //string</span><br></pre></td></tr></table></figure><h4 id="4-常用特殊字符串"><a href="#4-常用特殊字符串" class="headerlink" title="4.常用特殊字符串"></a>4.常用特殊字符串</h4><table><thead><tr><th align="center">字符串</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">\ &#39; &#39;‘</td><td align="center">\是转义字符，当我们 想要在字符串中去使用 引号的时候需要用到 这个字符，使用这个字 符对引号进行转义最终 输出的结果才是正常的结 果，否则JavaScript 可能会将相同的引号匹 配错误从而造成值的截断。 当然，我们在字符串中 使用\本身的时候也需要使用另一个\将\本 身进行转义，否则JavaScript 会认为\本体是一个转义字符。</td><td align="center">var a &#x3D; ‘I don’t konw’;以上的做法是错误的，因为JavaScript会将”I don’t”视为字符串，而其余部分则是无效代码，从而截断了后面的部分，我们应该是这样去做： var a &#x3D; ‘I don&#39;t know’;var a &#x3D; “I don’t know”;var a &#x3D; ‘“Hello”,World’;var a &#x3D; “&quot;Hello&quot;,World”;</td></tr><tr><td align="center">\n</td><td align="center">换行符</td><td align="center">var a &#x3D; ‘\n1\n2\n3\n’;console.log(a);123</td></tr><tr><td align="center">\r</td><td align="center">回车符</td><td align="center">var a &#x3D; ‘1\r\n2’;console.log(a);”12”</td></tr><tr><td align="center">\t</td><td align="center">制表符</td><td align="center">var a &#x3D; “1\t2”;console.log(a);”12”</td></tr><tr><td align="center">\u</td><td align="center">\u后面的字符会被视为Unicode码</td><td align="center">下面是作者的名字在保加利亚语中用西里尔字母的拼写：”\u0421\u0442\u043E\u044F\u043D”; “”Стoян””</td></tr></tbody></table><h3 id="4-布尔型"><a href="#4-布尔型" class="headerlink" title="4.布尔型"></a>4.布尔型</h3><p>布尔类型只有true和false两种值，一般作为判断语句去使用。</p><p> 布尔类型在使用typeof操作符的时候返回的值类型是boolean类型。</p><p> 在JavaScript中有三种布尔运算的运算符，分别是：</p><ul><li>!——逻辑非（取反）；</li><li>&amp;&amp;——逻辑与；</li><li>||——逻辑或；</li></ul><p>其中，逻辑非代表事物不是真的状态，逻辑与是代表当前事物和操作中所有的一切都是真最终结果才为真，只要有一个不满足就为假，即使是另外的条件满足。逻辑或则是多个条件中其中一个条件满足就为真，只有都为假的时候才能为假。</p><p>以下表列出相应情况</p><table><thead><tr><th align="center">操作</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">true &amp;&amp; true</td><td align="center">true</td></tr><tr><td align="center">true &amp;&amp; false</td><td align="center">false</td></tr><tr><td align="center">false &amp;&amp; true</td><td align="center">false</td></tr><tr><td align="center">false &amp;&amp; false</td><td align="center">false</td></tr><tr><td align="center">true || true</td><td align="center">true</td></tr><tr><td align="center">true || false</td><td align="center">true</td></tr><tr><td align="center">false || true</td><td align="center">true</td></tr><tr><td align="center">false || false</td><td align="center">false</td></tr></tbody></table><p><strong>注意：在或、与、非三个布尔运算符之中优先级为!（非）&gt;&amp;&amp;（或）&gt;||（与）。</strong><br>当然，在JavaScript中，还有另一组以布尔值为返回值类型的操作符，我们称之为比较运算符。</p><table><thead><tr><th align="center">操作符</th><th align="center">操作说明</th><th align="center">代码示例</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">相等运算符，即当两个 操作数相等时返回true， 比较的时候运算符两边 的数值会被自动转换为相同的类型。</td><td align="center">console.log(1 &#x3D;&#x3D; 1);trueconsole.log(1 &#x3D;&#x3D; 2);falseconsole.log(1 &#x3D;&#x3D; ‘1’);true</td></tr><tr><td align="center">&#x3D;&#x3D;&#x3D;</td><td align="center">严格相等运算符，当两边 的操作数的值和类型都 相同的时候才返回true， 可以说是全等于这类型的。这是一种比较全面可靠的 比较，因为这样的比较 不会出现可能发生的某个操作数 类型转换再比较。</td><td align="center">console.log(1 &#x3D;&#x3D;&#x3D; 1);trueconsole.log(1 &#x3D;&#x3D;&#x3D; ‘1’);false</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不相等运算符，当两边 的操作数不相等的时候 返回true，这种比较是会进行类型转换为 相同类型进行比较。</td><td align="center">console.log(1 !&#x3D; 1);falseconsole.log(1 !&#x3D; ‘1’);falseconsole.log(1 !&#x3D; ‘2’);true</td></tr><tr><td align="center">!&#x3D;&#x3D;</td><td align="center">严格不相等运算符，当两边 的操作数的值和类型都不相同 的时候才返回true， 可以说是全不等于这类型的。这是一种比较全面可靠的比较， 因为这样的比较不会出现可能发生的某个操作数 类型转换再比较。</td><td align="center">console.log(1 !&#x3D;&#x3D; 1);falseconsole.log(1 !&#x3D;&#x3D; ‘1’);true</td></tr><tr><td align="center">&gt;</td><td align="center">当符号左边的数大于右边的数的时候返回true。</td><td align="center">1 &gt; 1;false2 &gt; 1;true</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">当符号左边的数大于等于右边的数的时候返回true。</td><td align="center">1 &gt;&#x3D; 1;true1&gt;&#x3D; 2;false</td></tr><tr><td align="center">&lt;</td><td align="center">当符号左边的数小于右边的数的时候返回true。</td><td align="center">1 &lt; 1;false1 &lt; 2;true</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">当符号左边的数小于等于右边的数的时候返回true。</td><td align="center">1 &lt;&#x3D; 1;true2 &lt;&#x3D; 1;false</td></tr></tbody></table><p><strong>注意：NaN不等于任何东西，哪怕是自己，例如NaN &#x3D;&#x3D; NaN;返回值也为false。</strong></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-什么是数组？"><a href="#1-什么是数组？" class="headerlink" title="1.什么是数组？"></a>1.什么是数组？</h2><p>数组是一个用于存储数据的列表，这个列表可以存放任意数量的元素值。<br><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 var a = [1,2,3];</span><br><span class="line">2 console.log(a);        //[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>记住，元素在数组中的索引位置下标是从0开始的，所以数组元素的首个索引值是0，第二个元素索引值是1，以此类推。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 var a = [1,2,3];</span><br><span class="line">2 console.log(a[0]);        //1</span><br><span class="line">3 console.log(a[1]);        //2</span><br><span class="line">4 console.log(a[2]);        //3</span><br></pre></td></tr></table></figure><h2 id="2-数组的特点"><a href="#2-数组的特点" class="headerlink" title="2.数组的特点"></a>2.数组的特点</h2><ul><li>数组是一种数据存储形式。</li><li>数组是可以被索引的。</li><li>数组中的元素索引值是从0开始，按照每个元素的位置去依次递增。</li><li>数组能存储任何类型的数据，包括另一个数组。</li><li>我们可以对数组进行增删改查。</li><li>我们可以通过数组访问的方式去获取字符串中特定位置上的字符。</li></ul><h2 id="3-关于数组元素的增加和更新"><a href="#3-关于数组元素的增加和更新" class="headerlink" title="3.关于数组元素的增加和更新"></a>3.关于数组元素的增加和更新</h2><p>我们可以通过索引去直接增加或者更新数组中的元素，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = [1,2,3];</span><br><span class="line">2 a[1] = &quot;two&quot;;        //修改元素索引值为1的数</span><br><span class="line">3 a[3] = &quot;four&quot;;        //增加元素索引值为3的地方</span><br><span class="line">4 a[5] = &quot;six&quot;;        //增加元素索引值为6的地方，索引值为5的地方在控制台上输出的时候是空值</span><br><span class="line">5 console.log(a);        //[1, &quot;two&quot;, 3, &quot;four&quot;, empty, &quot;six&quot;]</span><br></pre></td></tr></table></figure><h2 id="4-关于数组元素的删除"><a href="#4-关于数组元素的删除" class="headerlink" title="4.关于数组元素的删除"></a>4.关于数组元素的删除</h2><p>删除数组中特定的元素我们需要使用delete操作符去实现操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 var a = [1,2,3];</span><br><span class="line">2 delete a[1];</span><br><span class="line">3 console.log(a);        // [1, empty, 3]</span><br></pre></td></tr></table></figure><h2 id="5-利用数组访问字符串"><a href="#5-利用数组访问字符串" class="headerlink" title="5.利用数组访问字符串"></a>5.利用数组访问字符串</h2><p>我们可以通过数组访问的方式去获取字符串中特定位置上的字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 var a = &#x27;abc&#x27;;</span><br><span class="line">2 console.log(a[0]);        //a</span><br><span class="line">3 console.log(a[1]);        //b</span><br><span class="line">4 console.log(a[2]);        //c</span><br></pre></td></tr></table></figure><h1 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h1><p>条件与循环是实际开发过程中重要的一部分，通过使用条件我们可以控制一段代码的执行走向，通过循环我们可以重复去执行某段代码。</p><h2 id="1-if条件表达式"><a href="#1-if条件表达式" class="headerlink" title="1.if条件表达式"></a>1.if条件表达式</h2><p>if条件表达式主要由if语句、语句条件、执行的代码块以及代码块内部的执行语句组成。其中语句条件是指逻辑类或者是比较类并返回布尔值类型的操作语句组成。</p><h2 id="2-else语句"><a href="#2-else语句" class="headerlink" title="2.else语句"></a>2.else语句</h2><p>else语句是if语句的可选项，运用于if语句表达式条件返回值为false的时候去执行该部分所包含的语句。</p><p><strong>举个栗子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 var a = 2;</span><br><span class="line">2 if(a &gt; 2) &#123;</span><br><span class="line">3     console.log(&quot;a是一个大于2的数字&quot;);</span><br><span class="line">4 &#125; else &#123;</span><br><span class="line">5     console.log(&quot;a不是大于2的数字&quot;);</span><br><span class="line">6 &#125;</span><br></pre></td></tr></table></figure><p>此外我们还有else if语句，也是if语句的可选项，是分支判断语句，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 var a = 2;</span><br><span class="line">2 if(a == 1) &#123;</span><br><span class="line">3     console.log(&quot;a = 1&quot;);</span><br><span class="line">4 &#125; else if(a == 2) &#123;</span><br><span class="line">5     console.log(&quot;a = 2&quot;);</span><br><span class="line">6 &#125; else &#123;</span><br><span class="line">7     console.log(&quot;a不满足上述条件&quot;);</span><br><span class="line">8 &#125;</span><br></pre></td></tr></table></figure><h2 id="3-switch语句"><a href="#3-switch语句" class="headerlink" title="3.switch语句"></a>3.switch语句</h2><p>当if语句中出现过多的else if语句的时候，最好使用switch语句进行条件的判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 1 var a = 1;</span><br><span class="line"> 2 var result = &#x27;&#x27;;</span><br><span class="line"> 3 switch(a) &#123;</span><br><span class="line"> 4     case 1:</span><br><span class="line"> 5         result = &#x27;Number 1&#x27;;</span><br><span class="line"> 6         break;</span><br><span class="line"> 7     case 2:</span><br><span class="line"> 8         result = &#x27;Number 2&#x27;;</span><br><span class="line"> 9         break;</span><br><span class="line">10     default:</span><br><span class="line">11         result = &#x27;Number X&#x27;;</span><br><span class="line">12         break;</span><br><span class="line">13 &#125;</span><br><span class="line">14 console.log(result);</span><br><span class="line">15 //输出结果：Number 1</span><br></pre></td></tr></table></figure><h3 id="switch语句的组成部分及其作用"><a href="#switch语句的组成部分及其作用" class="headerlink" title="switch语句的组成部分及其作用"></a>switch语句的组成部分及其作用</h3><ul><li>switch子句。</li><li>括号表达式。表达式通常是一个变量，有时候也可以是其它能够提供返回值的东西。</li><li>包含在switch语句大括号中的case序列块。</li><li>每个case语句下的表达式，如果表达式结果与switch语句表达式对比结果为true则case语句冒号之后的代码会被执行。</li><li>break语句是可选的，当代码执行到break语句时，就跳出当前循环结束整个过程的执行。</li><li>default关键字是默认条件代码块，当case条件的语句都不为true的时候，就执行default条件里的语句。</li></ul><h2 id="4-循环"><a href="#4-循环" class="headerlink" title="4.循环"></a>4.循环</h2><p>通过循环语句我们可以使某段代码可以反复执行，便于操作。</p><p>在JavaScript中，循环分为四种类型：</p><ul><li>while循环；</li><li>do-while循环；</li><li>for循环；</li><li>for-in循环。</li></ul><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h3><p>while循环语句分为小括号中的条件和大括号中的代码块,当小括号中的条件为true的时候会执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = 0;</span><br><span class="line">2 while(a &lt; 10) &#123;</span><br><span class="line">3     a++;</span><br><span class="line">4 &#125;</span><br><span class="line">5 console.log(a);</span><br></pre></td></tr></table></figure><h3 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2.do-while循环"></a>2.do-while循环</h3><p>do-while循环和while循环没有多大的区别，只不过是do-while循环里的代码块会至少执行一次，先执行，后判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = 0;</span><br><span class="line">2 do &#123;</span><br><span class="line">3     a++;</span><br><span class="line">4 &#125; while(a &lt; 10);</span><br><span class="line">5 console.log(a);</span><br></pre></td></tr></table></figure><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><p>for循环主要包括以下内容：</p><ul><li>初始化部分定义一个循环变量，例如var i &#x3D; 0;</li><li>条件部分将i与循环边界值进行对比。例如i &lt; 10;</li><li>自增部分将循环变量i自增1，例如i++。</li></ul><p><strong>举个栗子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 var a = &#x27;&#x27;;</span><br><span class="line">2 for(var i = 0;i &lt; 10;i++) &#123;</span><br><span class="line">3     a = &#x27;Hello World&#x27;;</span><br><span class="line">4 &#125;</span><br><span class="line">5 console.log(&quot;输出&quot; + a);</span><br></pre></td></tr></table></figure><p>可以这样去表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 for(var i = 0,a = &#x27;&#x27;;i &lt; 10;i++) &#123;</span><br><span class="line">2     a = &#x27;Hello World&#x27;;</span><br><span class="line">3 &#125;</span><br><span class="line">4 console.log(&quot;输出&quot; + a);</span><br></pre></td></tr></table></figure><p>不过这样写的话可读性会变得很差，所以并不建议这样写。<br><strong>for循环彼此之间可以进行嵌套。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 for(var i = 0;i &lt; 10;i++) &#123;</span><br><span class="line">2     for(var j = 0;j &lt; 10;j++) &#123;</span><br><span class="line">3         </span><br><span class="line">4     &#125;</span><br><span class="line">5 &#125;</span><br></pre></td></tr></table></figure><h3 id="4-for-in循环"><a href="#4-for-in循环" class="headerlink" title="4.for-in循环"></a>4.for-in循环</h3><p>for-in循环往往被用来遍历某个数组中的元素。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 var a = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;];</span><br><span class="line">2 var result = &#x27;\n&#x27;;</span><br><span class="line">3 for(var i in a) &#123;</span><br><span class="line">4     result = &#x27;index:&#x27; + i +&#x27;,value:&#x27; + a[i] + &#x27;\n&#x27;;</span><br><span class="line">5     console.log(result);</span><br><span class="line">6 &#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这部分内容主要介绍了JavaScript中的基本数据类型、数组、循环以及条件表达式的常规应用，尤其在数组方面并没有介绍全面，在后面的学习中再学到更多的应用时再做补充。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这部分内容主要介绍了JavaScript中基本数据类型、数组的基础知识、循环的常规应用以及表达式。&lt;/p&gt;
&lt;h1 id=&quot;变量&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web前端_JavaScript的Day1_面向对象的初步理解</title>
    <link href="http://example.com/2022/01/31/Web%E5%89%8D%E7%AB%AF-JavaScript%E7%9A%84Day1-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/01/31/Web%E5%89%8D%E7%AB%AF-JavaScript%E7%9A%84Day1-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/</id>
    <published>2022-01-30T17:24:26.000Z</published>
    <updated>2022-01-30T17:31:51.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JavaScript是一门面向对象的解释型脚本语言，通过利用面向对象的这种特性，实现了代码重用，并构建起了可伸缩的代码框架。作为JavaScript的初学者，因为面向对象是JavaScript的核心部分，所以在开始就略微的去学习了JavaScript的面向对象的基础概念部分，能够对于JavaScript的面向对象积累一些初始概念，并将自己对这些的感悟分享出来与大家交流。 作为初学者，可能有些地方理解不够正确，希望大家能提出自己的见解，欢迎批评指正。</p><h1 id="面向对象程序设计最常用到的概念"><a href="#面向对象程序设计最常用到的概念" class="headerlink" title="面向对象程序设计最常用到的概念"></a>面向对象程序设计最常用到的概念</h1><p>面向对象程序设计最常用到的概念如下：</p><ul><li>对象、方法、属性；</li><li>类；</li><li>封装；</li><li>聚合;</li><li>重用与继承；</li><li>多态。</li></ul><h2 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h2><p>JavaScript是面向对象的解释型脚本语言，所以面向对象是该编程语言的核心所在。那么什么是对象？对象我们有时候也叫“实例”，实际上就是指事物在程序语言中的表现形式，这类事物可以是人也可以是物，可以是客观存在的具体化对象，也可以是抽象的概念对象。这类事物往往具有其特定的称呼和特征，以及行为等。</p><p> <strong>例如：有一只黑色的猫在床上睡觉。其中，猫代表的是对象，黑色是颜色，代表属性，睡觉是一种动作行为，代表方法，在床上是睡觉的限定条件，限定动作的条件，也可以看做是传递给睡觉这个方法的参数。</strong></p><h2 id="2-类"><a href="#2-类" class="headerlink" title="2.类"></a>2.类</h2><p> 我们知道在现实生活中，相似对象之间往往具有一些共同的组成特征。比如阿拉斯加犬和哈士奇都属于狗类并具有狗类的特征，因此它们属于同一个类。所以类实际上就是一群具有相同特征的对象并同属一个类组成的集合。<strong>阿拉斯加犬是一个实例化对象，哈士奇是一个实例化对象，它们都是由同一个类创造出来的，而这个类还可以创造出其它具有相同特征的实例化对象，所以类也可以当做是一种模板，对象就是在模板上创建出来的实体。</strong></p><p> 当然，JavaScript并不存在类这一说法，它的一切都是基于对象，依靠着一套原型系统。在传统的面向对象语言中我们可以这样描述：我基于Cat类创建了一个叫做BlackCat的对象，而在基于原型的面向对象的语言中则是这样说道：我将现有的Cat对象扩展成一个叫做BlackCat的对象。</p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><p> 封装是用来封装对象中的内容，因此封装实际上就是去阐述对象中包含的内容。这些内容可以是属性，也可以是方法。</p><p> <strong>例如：一部手机是一个对象，手机里的处理器、电池、电路板等部件就是属性，我们作为用户通常通过手机的按钮、显示屏一类的接口去使用对应的方法，这等价于OOP(面向对象的程序设计)中的调用方法。但是这些接口的实现过程和手机所具有的属性等都是不可见的，我们并不清楚它们内部是如何工作的，只需要通过接口去使用功能即可。在编译类型的语言中我们也是直接去调用方法实现相应的功能即可，而不是去关心它的实现过程。</strong></p><p> 能够达到以上事例中的内容的封闭性就是封装。<strong>而封装的意义就是方便用户操作，优化用户体验。</strong></p><p> 在某些编程语言中我们可以使用public、private、project、default这些关键字来限定方法和属性的可见性，通过限定分类定义了用户所能访问的层次。<strong>但是在JavaScript中，所有的方法和属性都是public，话是这样说，其实JavaScript中也是提供了一些隐藏数据的方法来保护程序的隐私性。</strong></p><h2 id="4-聚合"><a href="#4-聚合" class="headerlink" title="4.聚合"></a>4.聚合</h2><p> 聚合也被称为组合，就是将几个现有对象合并为一个新对象的过程。这个过程实际上是一种思想，在实际解决问题的过程中我们可以采用这种思想将一个问题分解成多个小的问题，这些多个小的问题相对而言更加容易思考，提高解决问题的效率。</p><p> <strong>例如：在图书管理系统中我们要找《JavaScript高级程序设计》这本书，假若我们不使用检索功能去直接搜寻书，从一个系统包含的成千上万本书中去查找一本书也是一个很费劲的工作。因此我们可以将图书管理系统的功能模块细化，分门别类并有选择有目的的去寻找。《JavaScript高级程序设计》是一本关于前端的书籍，而前端书籍是属于技术类书籍，前端技术类书籍是包含在IT互联网类型中，而IT互联网类型可以在整个管理系统的图书分类中找到，而图书分类这个模块是在进入图书管理系统后比较显眼的功能分类中可以找到。通过将寻找这本书的流程分化成一个个的具体模块的过程再去逐一解决这个问题就是聚合。</strong></p><p> <strong>注意：以上事例要想实现是需要图书管理系统对于图书的分类比较明确而不是单单的将一堆图书直接聚集在一起，所以可以看出并不是在所有复杂情况下都可以使用聚合去解决问题，但是使用聚合可以解决大多数问题。</strong></p><p> 如果以上的示例还是令人感到迷惑的话我们再举一个例子。</p><p> <strong>例如：一个Web开发团队由许多人员组成，这是一个比较复杂的集体，我们如何才能清晰的知道这个集体中包含哪些人，每个人在做什么工作呢？我们需要将这个团队中包含的岗位罗列出来并将我们的对象，也就是开发人员和产品经理一一对应在相应的岗位，其中每一个开发人员或产品经理只是这个Web开发团队对象的一部分，这样划分下来我们就可以解决了这些问题。</strong></p><p> 总的来说聚合在开发过程中的作用是将分开编辑的代码聚合在一起<strong>方便调用</strong>。</p><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5.继承"></a>5.继承</h2><p> 继承是实际开发过程一种比较便捷的方式，通过继承这种方式可以实现代码的<strong>重复利用</strong>。</p><p> <strong>例如：人这个对象的名称我们可以将其命名为Person，这个对象中应该包含姓名、年龄、出生日期等属性以及走路、跑步、谈话、吃饭、睡觉等方法。这时候我们想要编写一个Student对象，这个对象拥有和Person对象一样的特征，因此我们可以直接继承Person对象，这样我们只需要通过去重用Person对象去编写Student对象的实现代码部分即可。接着我们还想编写一个Teacher对象依然可以这样做。</strong></p><p> 通过以上示例就可以实现了代码的复用避免了不停地重写相同的方法和属性，做到高效利用。</p><p> 在传统的面向对象的程序设计中，继承通常都是指类与类之间的关系，但是JavaScript中并不存在类这样的说法，所以它的继承是发生在对象与对象之间。</p><p> 当一个对象继承另一个对象的时候，可能会继承的基础上在里面加入新的方法，这个过程被称为“继承对象扩展自被继承对象”或者“继承对象继承自被继承对象”。比如A对象继承B对象，那么就是“A扩展自B”或“A继承自B”。此外我们也可以重新定义被继承的对象中的方法，被重新定义后的方法只是改变了当前继承在该对象中的方法，并不会真正改变被继承对象中的方法，而<strong>这种重新定义继承过来的方法的过程叫做方法的覆写</strong>。</p><h2 id="6-多态"><a href="#6-多态" class="headerlink" title="6.多态"></a>6.多态</h2><p> 还是上面的例子，Student对象继承了Person对象中所有的方法，Teacher对象也继承了Person对象中所有的方法，拿方法中的跑步举例，跑步是“run”方法，这时候代码中有一个叫做Jack的变量，我们并不知道Jack是属于Person对象还是属于Student对象还是属于Teachar，在这种情况下我们还是可以去调用对象的“run”方法，实现跑步这一方法，形如这种通过相同的方法调用来实现各自行为的能力的就是多态。如果再通俗来讲，就是<strong>同一个操作作用在不同的对象上产生不同的解释或者是不同的结果就是多态</strong>。</p><p>  <strong>举个栗子</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="number">2</span> Person.prototype.age = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line"> <span class="number">3</span>     <span class="keyword">return</span> age;</span><br><span class="line"> <span class="number">4</span> &#125;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="number">7</span> <span class="built_in">Object</span>.setPrototypeOf(Student.prototype,Person.prototype);</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="number">10</span> <span class="built_in">Object</span>.setPrototypeOf(Teacher.prototype,Person.prototype);</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="keyword">var</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="number">13</span> <span class="built_in">console</span>.log(stu.age(<span class="number">18</span>));</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span> <span class="keyword">var</span> tea = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="number">16</span> <span class="built_in">console</span>.log(tea.age(<span class="number">28</span>));</span><br></pre></td></tr></table></figure><p>  即使后面再加上一个Master对象，依然可以继续调用，不影响其它代码的调用实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="number">2</span> Person.prototype.age = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line"> <span class="number">3</span>     <span class="keyword">return</span> age;</span><br><span class="line"> <span class="number">4</span> &#125;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> <span class="number">7</span> <span class="built_in">Object</span>.setPrototypeOf(Student.prototype,Person.prototype);</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="number">10</span> <span class="built_in">Object</span>.setPrototypeOf(Teacher.prototype,Person.prototype);</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="function"><span class="keyword">function</span> <span class="title">Master</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="number">13</span> <span class="built_in">Object</span>.setPrototypeOf(Master.prototype,Person.prototype);</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span> <span class="keyword">let</span> stu = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="number">16</span> <span class="built_in">console</span>.log(stu.age(<span class="number">18</span>));</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span> <span class="keyword">let</span> tea = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="number">19</span> <span class="built_in">console</span>.log(tea.age(<span class="number">28</span>));</span><br><span class="line"><span class="number">20</span> </span><br><span class="line"><span class="number">21</span> <span class="keyword">let</span> mas = <span class="keyword">new</span> Master();</span><br><span class="line"><span class="number">22</span> <span class="built_in">console</span>.log(mas.age(<span class="number">38</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;JavaScript是一门面向对象的解释型脚本语言，通过利用面向对象的这种特性，实现了代码重用，并构建起了可伸缩的代码框架。作为JavaSc</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>你好，世界</title>
    <link href="http://example.com/2022/01/30/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C/"/>
    <id>http://example.com/2022/01/30/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C/</id>
    <published>2022-01-30T05:48:53.754Z</published>
    <updated>2022-01-30T05:49:59.304Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="This-is-my-first-development"><a href="#This-is-my-first-development" class="headerlink" title="This is my first development!!!"></a>This is my first development!!!</h1><pre class="mermaid">    graph TD;      A-->B;      A-->C;      B-->D;      C-->D;</pre><p>$$<br>\begin{equation}<br>\left{<br>\begin{array}{lr}<br>x&#x3D;\dfrac{3\pi}{2}(1+2t)\cos(\dfrac{3\pi}{2}(1+2t)), &amp; \<br>y&#x3D;s, &amp; 0 \leq s \leq L,|t| \leq1. \<br>z&#x3D;\dfrac{3\pi}{2}(1+2t)\sin(\dfrac{3\pi}{2}(1+2t)), &amp;<br>\end{array}<br>\right.<br>\end{equation}<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/29/hello-world/"/>
    <id>http://example.com/2022/01/29/hello-world/</id>
    <published>2022-01-29T13:51:45.079Z</published>
    <updated>2022-01-30T05:39:53.017Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="This-is-my-first-development"><a href="#This-is-my-first-development" class="headerlink" title="This is my first development!!!"></a>This is my first development!!!</h1><pre class="mermaid">    graph TD;      A-->B;      A-->C;      B-->D;      C-->D;</pre><p>$$<br>\begin{equation}<br>\left{<br>\begin{array}{lr}<br>x&#x3D;\dfrac{3\pi}{2}(1+2t)\cos(\dfrac{3\pi}{2}(1+2t)), &amp; \<br>y&#x3D;s, &amp; 0 \leq s \leq L,|t| \leq1. \<br>z&#x3D;\dfrac{3\pi}{2}(1+2t)\sin(\dfrac{3\pi}{2}(1+2t)), &amp;<br>\end{array}<br>\right.<br>\end{equation}<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
